{"pages":[{"title":"welcome lovife's Wiki Site","date":"2018-04-04T07:12:00.000Z","path":"index.html","text":"个人 Wiki 站点 want to be a active learner, but failed, never stop trying. 收集学习材料 手写笔记 电子笔记系统 &amp; Wiki &amp; Blog my org/ |--agenda: org-agenda file |--inbox: mixed org-mode note |--note: first assimilate | |--notebook1 | | |--note1.org | | |--note1.publish | | | ... | | |--note.org | | `--note.publish | | ... | `--notebook |--wiki: make it my own |--anki: make anki card for anything important or easy to forget `--blog: for share what is worth sharing 笔记 在于 理解和分类整理 Wiki 在于 积累和快速索引 Blog 在于 精 Render by Emacs 25.3.1 (Org mode 8.2.10)"},{"title":"About","date":"2018-04-04T06:15:56.919Z","path":"about/index.html","text":""},{"title":"Categories","date":"2018-04-04T06:15:56.920Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-04-04T06:15:56.921Z","path":"tags/index.html","text":""}],"posts":[{"title":"Ngrok","date":"2018-04-04T09:02:00.000Z","path":"_post/技术实践/服务器/Ngrok实现内网穿透/ngrok.html","text":"Ngrok on github Ngrok is a tunneling, reverse proxy that establishes secure tunnels from a public endpoint to a locally running network service while capturing all traffic for inspection and replay. 翻译一下： Ngrok是一个隧道，即建立安全通道从公共端点到本地运行的网络服务，同时捕捉检查和重播所有流量的反向代理。 用 ngrok 可以干嘛？ 代理本地的数据，并将其转发到外网 Render by Emacs 25.3.1 (Org mode 8.2.10)","tags":[{"name":"ngrok","slug":"ngrok","permalink":"http://wiki.lovife.cn/tags/ngrok/"}],"categories":[{"name":"技术实践","slug":"技术实践","permalink":"http://wiki.lovife.cn/categories/技术实践/"},{"name":"服务器","slug":"技术实践/服务器","permalink":"http://wiki.lovife.cn/categories/技术实践/服务器/"},{"name":"Ngrok实现内网穿透","slug":"技术实践/服务器/Ngrok实现内网穿透","permalink":"http://wiki.lovife.cn/categories/技术实践/服务器/Ngrok实现内网穿透/"}]},{"title":"welcome lovife's Wiki Site","date":"2018-04-04T07:12:00.000Z","path":"_post/index.html","text":"个人 Wiki 站点 want to be a active learner, but failed, never stop trying. 收集学习材料 手写笔记 电子笔记系统 &amp; Wiki &amp; Blog my org/ |--agenda: org-agenda file |--inbox: mixed org-mode note |--note: first assimilate | |--notebook1 | | |--note1.org | | |--note1.publish | | | ... | | |--note.org | | `--note.publish | | ... | `--notebook |--wiki: make it my own |--anki: make anki card for anything important or easy to forget `--blog: for share what is worth sharing 笔记 在于 理解和分类整理 Wiki 在于 积累和快速索引 Blog 在于 精 Render by Emacs 25.3.1 (Org mode 8.2.10)","tags":[],"categories":[]},{"title":"Ngrok 内网穿透 和 远程桌面","date":"2018-04-01T00:00:00.000Z","path":"_post/技术实践/服务器/Ngrok 内网穿透 和 远程桌面.html","text":"尝试用 iPad 远程控制寝室的 PC，但是寝室网络并没有提供 公网IP，所以需要自己实现内网穿透，在网上发现一篇技术博客，使用 Ngrok 实现。于是跟着实践了一下，下面是成功远程桌面截图 和 ngrok 的搭建过程。 需要 有 公网IP 的 VPS 自由解析的 域名 我在 腾讯云 上购买 VPS 和 域名 ，并装上 ubuntu 16.04LTS 64位 并使用 root 登陆，可以省去很多麻烦 解析域名 把域名 mydomain.cn 解析到 VPS 的地址，如下方式 ngrok.myrdomain.cn ----------&gt; A记录到你的 VPS IP *.ngrok.mydomain.cn ----------&gt; CNAME到ngrok.uprogrammer.cn 配置 VPS 需要安装的环境和工具 [X] go [X] git [X] ngrok VPS 为 ngrok 安装 go 环境 从 go 官网下载最新的 go 版本 (我查询到版本为 go1.10.1.linux-amd64.tar.gz )，并解压到 /usr/local 目录下 $ wget -c https://storage.googleapis.com/golang/go1.10.1.linux-amd64.tar.gz&#10;$ tar -C /usr/local -zxvf go1.10.1.linux-amd64.tar.gz 设置相关环境 # &#21487;&#20197;&#26681;&#25454;&#33258;&#24049;&#38656;&#35201;&#35843;&#25972;&#36335;&#24452; &#10;$ echo &#39;export GOROOT=/usr/local/go&#39; &#38;gt;&#38;gt; /etc/profile&#10;$ echo &#39;export PATH=$PATH:$GOROOT/bin&#39; &#38;gt;&#38;gt; /etc/profile&#10;$ echo &#39;export GOPATH=$HOME/go&#39; &#38;gt;&#38;gt; /etc/profile&#10;$ echo &#39;export GOROOT_BOOTSTRAP=/usr/local/go&#39; &#38;gt;&#38;gt; /etc/profile&#10;$ source /etc/profile 检查是否安装成功 $ go version 安装成功输出 go version go1.10.1 linux/amd64 安装 Git ubuntu 上可以直接通过 apt-get install git 来安装 git 。 完成以后，做相应的 git 配置。 安装 ngrok 下载 ngrok ，并修改参数 # &#26681;&#25454;&#33258;&#24049;&#30340;&#20449;&#24687;&#22635;&#20889;&#65292;&#23588;&#20854; NGROK_DOMAIN=&#34;ngrok.mydomain.cn&#34;&#10;$ cd /usr/local/&#10;$ git clone https://github.com/inconshreveable/ngrok.git&#10;$ export GOPATH=/usr/local/ngrok/&#10;$ export NGROK_DOMAIN=&#34;ngrok.mydomain.cn&#34;&#10;$ cd ngrok 生成证书（必须） $ openssl genrsa -out rootCA.key 2048&#10;$ openssl req -x509 -new -nodes -key rootCA.key -subj &#34;/CN=$NGROK_DOMAIN&#34; -days 5000 -out rootCA.pem&#10;$ openssl genrsa -out server.key 2048&#10;$ openssl req -new -key server.key -subj &#34;/CN=$NGROK_DOMAIN&#34; -out server.csr&#10;$ openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000 将源代码目录下生成的证书文件复制到指定的位置 $ cp rootCA.pem assets/client/tls/ngrokroot.crt&#10;$ cp server.crt assets/server/tls/snakeoil.crt&#10;$ cp server.key assets/server/tls/snakeoil.key 如果是在国内的服务器，需要执行下面的修改，否则会由于网络原因产生库的依赖问题。香港或者国外的服务器就不需要了。 $ vim /usr/local/ngrok/src/ngrok/log/logger.go&#10;$ log &#34;github.com/keepeye/log4go&#34; 编译服务器，这里也同时编译了一个 linux 下的客户端。 # 64&#20301;&#31995;&#32479;&#20351;&#29992;amd64&#65292;32&#20301;&#65292;&#38656;&#35201;&#25913;&#25104;amd386&#10;$ cd /usr/local/go/src&#10;$ GOOS=linux GOARCH=amd64 ./make.bash&#10;$ cd /usr/local/ngrok/&#10;$ GOOS=linux GOARCH=amd64 make release-server release-client 编译 Mac 客户端 # 64&#20301;&#31995;&#32479;&#20351;&#29992;amd64&#65292;32&#20301;&#65292;&#38656;&#35201;&#25913;&#25104;amd386&#10;$ cd /usr/local/go/src&#10;$ GOOS=darwin GOARCH=amd64 ./make.bash&#10;$ cd /usr/local/ngrok/&#10;$ GOOS=darwin GOARCH=amd64 make release-client 编译 Windows 客户端 # 64&#20301;&#31995;&#32479;&#20351;&#29992;amd64&#65292;32&#20301;&#65292;&#38656;&#35201;&#25913;&#25104;amd386&#10;cd /usr/local/go/src&#10;GOOS=windows GOARCH=amd64 ./make.bash&#10;cd /usr/local/ngrok/&#10;GOOS=windows GOARCH=amd64 make release-client VPS 服务端运行与使用 进入服务端目录，服务端程序文件名为 ngrokd ，并执行相应命令 # &#38656;&#35201; root &#26435;&#38480;&#10;$ cd /usr/local/ngrok/bin&#10;$ ./ngrokd -domain=&#34;$NGROK_DOMAIN&#34; -httpAddr=&#34;:80&#34; 返回类似如下的结果，则说明服务端运行成功 [04/01/18 09:32:24] [INFO] [registry] [tun] No affinity cache specified&#10;[04/01/18 09:32:24] [INFO] Listening for public http connections on [::]:80&#10;[04/01/18 09:32:24] [INFO] Listening for public https connections on [::]:443&#10;[04/01/18 09:32:24] [INFO] Listening for control and proxy connections on [::]:4443&#10;[04/01/18 09:32:24] [INFO] [metrics] Reporting every 30 seconds 客户端的运行与使用 把刚刚从 VPS 服务器 上生成的客户端服务器下载到本机，可以通过 scp 命令 $ scp username@servername:/path/filename /var/www/local_dir&#65288;&#26412;&#22320;&#30446;&#24405;&#65289; 64位 mac 客户端的位置： $ /usr/local/ngrok/bin/darwin_amd64/ngrok 64位 windows 客户端的位置： $ /usr/local/ngrok/bin/windows_amd64/ngrok.exe linux 客户端的位置： $ /usr/local/ngrok/bin/ngrok 客户端程序下载到本地以后，在 本地同一目录下 新建名为 ngrok.cfg 的文件，文件内容如下： server_addr: &#34;ngrok.mydomain.cn:4443&#34;&#10;trust_host_root_certs: false 运行客户端 # windows&#36816;&#34892;&#23458;&#25143;&#31471;&#65292;&#35831;&#25226;./&#25913;&#25104;win&#39118;&#26684;&#30340;&#30446;&#24405;&#26041;&#24335;&#10; # &#21518;&#38754;&#30340;80&#26159;&#25351;&#26412;&#26426;&#31471;&#21475;&#65292;&#36825;&#37324;&#26159;&#25351;&#25226;&#26412;&#26426;&#30340;8080&#31471;&#21475;&#24320;&#25918;&#31359;&#36879;&#10; # -subdomain&#21442;&#25968;&#25351;&#30340;&#26159;&#22495;&#21517;&#65292;&#20363;&#22914;&#36825;&#37324;&#26159;test.ngrok.mydomain.cn&#10;$ ./ngrok -config=./ngrok.cfg -subdomain=test 8080 返回类似如下的结果，则说明客户端运行成功 Tunnel Status online &#10;Version 1.7/1.7 &#10;Forwarding http://test.ngrok.mydomian.cn -&#38;gt; 127.0.0.1:8080 &#10;Forwarding https://test.ngrok.mydomian.cn -&#38;gt; 127.0.0.1:8080 &#10;Web Interface 127.0.0.1:4040 &#10;# Conn 0 &#10;Avg Conn Time 0.00ms 遇到的坑 客户端可以连上，但域名不完全，显示如下： Tunnel Status online&#10;Version 1.7/1.7&#10;Forwarding http://test. -&#38;gt; 127.0.0.1:8080&#10;Forwarding https://test. -&#38;gt; 127.0.0.1:8080&#10;Web Interface 127.0.0.1:4040&#10;# Conn 0&#10;Avg Conn Time 0.00ms 这种错误是由于服务端运行时环境变量没有正确配置导致的，可以显示设置域名： $ ./ngrokd -domain=&#34;ngrok.uprogrammer.cn&#34; -httpAddr=&#34;:80&#34; 参考博客 说 如果你对 VPS 服务器已经有其他程序占用 80 端口，而还需要 ngrok 通过80端口做内网穿透的话，可以通过 nginx 来做反向代理。 这里留坑以后填 远程桌面 配置 保证 PC 正确开启了远程控制 修改配置文件 ngrok.cfg server_addr: &#34;ngrok.mydomain.cn:4443&#34;&#10;trust_host_root_certs: false&#10;&#10;tunnels:&#10; ssh:&#10; remote_port: 51001&#10; proto:&#10;&#9; tcp: &#34;127.0.0.1:22&#34;&#10; mstsc:&#10;&#9;remote_port: 52222&#10;&#9;proto:&#10;&#9; tcp: &#34;127.0.0.1:3389&#34;&#10; web:&#10; subdomain: &#34;tss&#34;&#10; proto:&#10; http: 80 修改 subdomain: \"tss\"的tss为自己的域名前缀。 参考如下： ubuntu搭建ngrok服务器，尽享内网穿透技术带来的福利 Ngrok远程桌面及ssh配置 Render by Emacs 25.3.1 (Org mode 8.2.10)","tags":[{"name":"Ngrok","slug":"Ngrok","permalink":"http://wiki.lovife.cn/tags/Ngrok/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://wiki.lovife.cn/tags/ubuntu/"},{"name":"内网穿透","slug":"内网穿透","permalink":"http://wiki.lovife.cn/tags/内网穿透/"},{"name":"远程桌面","slug":"远程桌面","permalink":"http://wiki.lovife.cn/tags/远程桌面/"}],"categories":[{"name":"技术实践","slug":"技术实践","permalink":"http://wiki.lovife.cn/categories/技术实践/"},{"name":"服务器","slug":"技术实践/服务器","permalink":"http://wiki.lovife.cn/categories/技术实践/服务器/"}]}]}